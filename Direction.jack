class Direction {

  field int deltaX;
  field int deltaY;

  method void internal(int argDeltaX, int argDeltaY) {
    let deltaX = argDeltaX;
    let deltaY = argDeltaY;
    return;
  }

  constructor Direction left() {
    do internal(-1, 0);
    return this;
  }

  constructor Direction up() {
    do internal(0, -1);
    return this;
  }

  constructor Direction right() {
    do internal(1, 0);
    return this;
  }

  constructor Direction down() {
    do internal(0, 1);
    return this;
  }

  method Vector vector(int scaleFactor) {
    var int xComponent;
    var int yComponent;

    let xComponent = Math.multiply(scaleFactor, deltaX);
    let yComponent = Math.multiply(scaleFactor, deltaY);

    return Vector.new(xComponent, yComponent);
  }

  method int getInternalDeltaX() {
    return deltaX;
  }

  method int getInternalDeltaY() {
    return deltaY;
  }

  method boolean isInverseOf(Direction other) {
    var int sum;

    let sum = deltaX + other.getInternalDeltaX();
    if (~(sum = 0)) {
      return false;
    }

    let sum = deltaY + other.getInternalDeltaY();
    if (~(sum = 0)) {
      return false;
    }

    return true;
  }
}
